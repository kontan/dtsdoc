/**
 *
 * # dtsdoc/TypeScript Ambient Source File Documentation Generator
 *
 * ## abstruct
 * 
 * `dtsdoc` is a documentation generator for TypeScript ambient source file. You can also use [markdown](http://daringfireball.net/projects/markdown/syntax) to document your code. 
 *
 * dtsdoc runs on a Web browser or node.js.
 *
 * ## Usage
 *
 * * You can directly input your definition in the textarea. Push the Generate button to generate a document.
 * * You can also load your local definition file. Push to Open button to show a file dialog.
 * * Downloading a generated file is available only Chorme with "--enable-experimental-extension-apis" option because it uses File System API.
 * * &#64;param tag is supported.
 *
 *
 * ### in node.js
 *
 *     var code:string = fs.readFileSync(file).toString();
 *     var html:string = dtsdoc.toHTMLDocument(code);
 *     fs.writeFileSync(matches[1] + ".d.html", html); 
 *
 * 
 * This tool is be at an early stage.
 *
 * ## Example
 *
 * This document is generated by dtsdoc. 
 *
 */



module M {
    var c: N.C;
    var d: M.N.C;
}

module M.N {
    class C {
    }
}


module THREE.Hoge{
    /**
     * Example:
     *
     *     var v:Vector3 = new Vector3();
     *     v.x += 10;
     */
    class Vector3{
        
    }
}

import Vector3 = THREE.Vector3;

var v: Vector3;



/**
 * - hoge
 * - piyo
 * - foo
 *
 * ----
 */
class Hoge{
}


/**** Comment *****/


module S.T.U{
    class V{
    }
}


module X{
    module Y{
        module Z{
            class G{
                static foo: string;
            }
        }
    }
}

var g:X. Y.Z.G;


interface SVGZoomEvent extends UIEvent {
    newScale: number;
}

var ctor: new () => M.C;

// express,marked,sammyjs function()
// leaflet new ()=>T
// node,socket.io        vimport events = module("events");
// redits      declare module 'redis' {

declare module "http" {
    import events = module("events");
    function():string;
}

var V:string;

function f(a:number, b:string, c:Date):void;



module M{
    class C{
        constructor();

        /**
         * class M.C is absolutely hoge.
         * @param a 1st parameter.
         * @param b 2nd parameter.
         * @param c 3rd parameter.
         */
        method(a:number, b:string, c:Date):void;

        static field:string;
    }

    class D extends C{

    }

    class G extends D implements I{

    }

    interface I{
        f():void;
        g:number;
    }


    enum E{
        X, Y, Z
    }


    module N{
                
    }
}